package com.novel.api.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.hibernate.SQLQuery;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.novel.api.entity.Novel;
import com.novel.api.entity.NovelStore;
import com.novel.api.entity.NoverDetail;
import com.novel.api.pojo.NovelDetailView;
import com.novel.api.pojo.NovelView;
import com.novel.api.repository.NovelDetailRepository;
import com.novel.api.repository.NovelRepository;
import com.novel.api.repository.NovelStoreRepository;

@Service
public class NovelService {
	@Autowired
	private NovelRepository novelRep;

	@Autowired
	private NovelStoreRepository novelStoreRepository;
	@Autowired
	private NovelDetailRepository novelDetailRep;

	@Autowired
	private EntityManager entityManager;

	public NovelStore saveAndUpdate(NovelStore po) {
		return novelStoreRepository.saveAndFlush(po);
	}

	public Novel findNovelByID(int id) {
		return novelRep.findById(id).get();
	}

	@SuppressWarnings("deprecation")
	public NovelView findNovelViewByID(int id) {
		// 执行原生SQL
		Query nativeQuery = entityManager.createNativeQuery("select u.* from  tbl_novel u  where u.id=:id ");
		nativeQuery.setParameter("id", id);
		// 指定返回对象类型
		nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(NovelView.class));
		// 返回对象 List<T>
		@SuppressWarnings("unchecked")
		List<NovelView> list = nativeQuery.getResultList();
		if (list.size() == 0) {
			return null;
		}
		return list.get(0);
	}

	public List<Novel> findSearch(Novel model) {
		List<Novel> resultList = null;
		Specification<Novel> querySpecifi = new Specification<Novel>() {
			@Override
			public Predicate toPredicate(Root<Novel> root, CriteriaQuery<?> criteriaQuery,
					CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();
				if (model.getSex_status() != 0) {
					predicates.add(
							criteriaBuilder.equal(root.get("sex_status").as(Integer.class), model.getSex_status()));
				}
				if (model.getType_status() != 0) {
					predicates.add(
							criteriaBuilder.equal(root.get("type_status").as(Integer.class), model.getType_status()));
				}
				if (model.getNovel_state() != 0) {
					predicates.add(
							criteriaBuilder.equal(root.get("novel_state").as(Integer.class), model.getNovel_state()));
				}
				if (!"".equals(model.getNovel_name())) {
					predicates.add(criteriaBuilder.like(root.get("novel_name").as(String.class),
							"%" + model.getNovel_name() + "%"));
				}
				return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
			}
		};
		resultList = novelRep.findAll(querySpecifi);
		return resultList;
	}

	public List<NovelView> findByNovelViewByUserid(int user_id) {
		// 执行原生SQL
		String sql = "select u.*,o.update_time from tbl_novel_store o  left join  tbl_novel u on  o.novel_id=u.id where o.user_id=:user_id";
		Query nativeQuery = entityManager.createNativeQuery(sql);
		nativeQuery.setParameter("user_id", user_id);
		// 指定返回对象类型
		nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(NovelView.class));
		// 返回对象 List<T>
		@SuppressWarnings("unchecked")
		List<NovelView> list = nativeQuery.getResultList();
		if (list.size() == 0) {
			return null;
		}
		return list;
	}

	/**
	 * 目录
	 * 
	 * @param novel_id
	 * @return
	 */
	public List<NoverDetail> findByNovelDetailByNovelID(int novel_id) {
		return novelDetailRep.findByNovelDetailByNovelID(novel_id);

	}

	@SuppressWarnings("deprecation")
	public List<NovelView> findNovelViewByCondition(Novel model) {

		String sql = "select u.* from  tbl_novel u  where u.id=:id limit 10";
		// 执行原生SQL
		Query nativeQuery = entityManager.createNativeQuery(sql);
		nativeQuery.setParameter("id", model.getId());
		// 指定返回对象类型
		nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(NovelView.class));
		// 返回对象 List<T>
		@SuppressWarnings("unchecked")
		List<NovelView> list = nativeQuery.getResultList();
		if (list.size() == 0) {
			return null;
		}
		return list;
	}

	@SuppressWarnings("deprecation")
	public List<NovelDetailView> findNovelDetailViewByCondition(JSONObject param) {

		String sql = "select a.id,a.novel_id,a.chapter_name,a.chapter_url,a.update_time, "
				+ "(case when a.free_state=1 and b.id is not NULL then 2  else a.free_state end) as free_state"
				+ " from  tbl_novel_detail a left join tbl_chapter_buy b on a.id=b.novel_detail_id where a.novel_id=:novel_id and b.user_id=:user_id ";
		// 执行原生SQL
		Query nativeQuery = entityManager.createNativeQuery(sql);
		nativeQuery.setParameter("novel_id", param.getInteger("novel_id"));
		nativeQuery.setParameter("user_id", param.getInteger("user_id"));
		// 指定返回对象类型
		nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(NovelDetailView.class));
		// 返回对象 List<T>
		@SuppressWarnings("unchecked")
		List<NovelDetailView> list = nativeQuery.getResultList();
		if (list.size() == 0) {
			return null;
		}
		return list;
	}
}
